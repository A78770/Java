package ui;

import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.util.StringConverter;
import model.Civil;
import organisation.Organisation;
import service.dao.UserDao;

public class FicheCivController implements Initializable{
	@FXML
	private TextField nom;
	@FXML
	private TextField prenom;
	@FXML
	private TextField login;
	@FXML
	private TextField civ;
	@FXML
	private TextField coord;
	@FXML
	private TextField nat;
	@FXML
	private DatePicker dte_naiss;
	@FXML
	private Label ajt;
	@FXML
	private Label mod;
	@FXML
	private Button btn_val;
	@FXML
	private Button btn_ann;
	@FXML
	private DatePicker dte_dec;
	@FXML
	private TextField idcivil;
	@FXML
	private ComboBox<Organisation> org;
	@FXML
	private TextArea orgtxt;
	@FXML
	private TextArea orgid;
	@FXML
	private Button remz;
	private Civil civil;
	ObservableList<Integer> list = FXCollections.observableArrayList();
	// Event Listener on Button[#btn_val].onAction
	public FicheCivController(Civil civil) {
		this.civil=civil;
	}
	@FXML
	public void handleval(ActionEvent event) {
		// TODO Autogenerated
		if(idcivil.getText().length()==0) {
			if (nom.getText().length()==0 || prenom.getText().length()==0 || civ.getText().length()==0 || coord.getText().length()==0 || nat.getText().length()==0 || dte_naiss.getValue()==null) {
				JOptionPane.showMessageDialog(null, "Veuillez remplir tous les champs terminant par * svp", "Erreur", JOptionPane.ERROR_MESSAGE);
			}else {
				UserDao user = new UserDao();
				Organisation org = new Organisation(null,null,null,0, null,null,0);
				Connection connection = user.getConnection();
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd").withZone( ZoneId.systemDefault() );
				Statement statement=null;
				
				try {
					//statement = connection.createStatement();
					String query = "INSERT INTO civil (motDePasse,nom,prenom,civilite,	coordonees,nationalite,	dateNaissance,";
					if (login.getText().length()!=0) {
						query+="login,";
					}
					if (dte_dec.getValue()!=null) {
						query+="dateDeces,";
					}
					query+="dateAjout) VALUES ('test','"+nom.getText()+"','"+prenom.getText()+"','"+civ.getText()+"','"+coord.getText()+"','"+nat.getText()+"','"+dte_naiss.getValue()+"'";
					if (login.getText().length()!=0) {
						query+=",'"+login.getText()+"'";
					}
					if (dte_dec.getValue()!=null) {
						query+=",'"+dte_dec.getValue()+"'";
					}
					query+=",'"+formatter.format(Instant.now())+"')";
					PreparedStatement insertion = connection.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);
					insertion.executeUpdate();
					//statement.executeQuery(query);
					try (ResultSet generatedKeys = insertion.getGeneratedKeys()) {
			            if (generatedKeys.next()) {
			            	org.setId(generatedKeys.getInt(1));
			            }
			            if (orgtxt.getText().length()>0) {
			            	int size = list.size();
			            	statement = connection.createStatement();
			            	for (int i =0; i<size; i++) {
			            		query="INSERT INTO appartenir VALUES ("+list.get(i)+","+org.getId()+")";
			            		statement.executeQuery(query);
			            	}
			            }
			            else {
			                throw new SQLException("Erreur de création, pas d'ID obtenu");
			            }
			        }
					JOptionPane.showMessageDialog(null, "Enregistrement réussi", "Information", JOptionPane.INFORMATION_MESSAGE);
					Main.window.setScene(Main.scene2);
					Main.window.setTitle("Civils");
					Main.window.setWidth(1450);
					Main.window.setHeight(550);
					Main main = new Main();
					main.refreshtable();
				} catch (SQLException e) {
					throw new RuntimeException(e);
				}
			}
		}else {
			if (nom.getText().length()==0 || prenom.getText().length()==0 || civ.getText().length()==0 || coord.getText().length()==0 || nat.getText().length()==0 || dte_naiss.getValue()==null) {
				JOptionPane.showMessageDialog(null, "Veuillez remplir tous les champs terminant par * svp", "Erreur", JOptionPane.ERROR_MESSAGE);
			}else {
				UserDao user = new UserDao();
				//Organisation org = new Organisation(null,null,null,0, null,null,0);
				Connection connection = user.getConnection();
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd").withZone( ZoneId.systemDefault() );
				Statement statement=null;
				try {
					statement = connection.createStatement();
					String query = "UPDATE civil SET nom = '"+nom.getText()+"', prenom = '"+prenom.getText()+"', civilite = '"+civ.getText()+"', coordonees= '"+coord.getText()+"', nationalite = '"+nat.getText()+"', dateNaissance = '"+dte_naiss.getValue()+"'";
					if (login.getLength()!=0) {
						query +=", Login = '"+login.getText()+"'";
					}
					if (dte_dec.getValue()!=null) {
						query +=", dateDeces = '"+dte_dec.getValue()+"'";
					}
					query += ", dateModification = '"+formatter.format(Instant.now())+"' WHERE IdCiv = "+idcivil.getText();
					statement.executeQuery(query);
					for (int i=0; i<list.size(); i++) {
						query = "SELECT * FROM appartenir WHERE IdCiv = "+idcivil.getText()+" AND idOrg = "+list.get(i);
						ResultSet result = statement.executeQuery(query);
						if (result.next()) {
						}else {
							query = "INSERT INTO appartenir VALUES ("+list.get(i)+" , "+idcivil.getText()+")";
							statement.executeQuery(query);
						}
					}
					JOptionPane.showMessageDialog(null, "Modification réussie", "Information", JOptionPane.INFORMATION_MESSAGE);
					Main.window.setScene(Main.scene2);
					Main.window.setTitle("Civils");
					Main.window.setWidth(1450);
					Main.window.setHeight(550);
					Main main = new Main();
					main.refreshtable();
				} catch (SQLException e) {
					throw new RuntimeException(e);
				}
			}
		}
		

	}
	// Event Listener on Button[#btn_ann].onAction
	@FXML
	public void handleann(ActionEvent event) {
		// TODO Autogenerated
			Main.window.setScene(Main.scene2);
			Main.window.setTitle("Civils");
			Main.window.setWidth(1450);
			Main.window.setHeight(550);
	}
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		UserDao user = new UserDao();
		ObservableList<String> listItems = FXCollections.observableArrayList();
		ObservableList<Organisation> liste = FXCollections.observableArrayList();
		Connection conn = user.getConnection();
		Statement statement=null;
		// TODO
		try {
			statement = conn.createStatement();
			ResultSet result = statement.executeQuery("select * from organisation");
			while(result.next()) {
			Organisation org = new Organisation(result.getString("nom"),result.getString("siegeSocial"),result.getString("dirigeant"),result.getInt("membres"),result.getString("commentaire"),result.getDate("dateAjout").toLocalDate().atStartOfDay(ZoneOffset.UTC).toInstant(),result.getInt("idOrg"));		
			liste.add(org);	
			listItems.add(result.getString("nom"));
			}
			org.setItems(liste);
			//org.setCellFactory(value);
			org.setConverter(new StringConverter<Organisation>() {
	              @Override
	              public String toString(Organisation user) {
	                if (user== null){
	                  return null;
	                } else {
	                  return user.getNom();
	                }
	              }

	            @Override
	            public Organisation fromString(String id) {
	                return null;
	            }
	        });
			if (civil!=null) {
				idcivil.setText(Integer.toString(civil.getId()));
				dte_naiss.setValue(LocalDate.ofInstant(civil.getBirthday(), ZoneOffset.UTC));
				nom.setText(civil.getFirstName());
				prenom.setText(civil.getLastName());
				civ.setText(civil.getCivility());
				coord.setText(civil.getContactInfo());
				nat.setText(civil.getNationality());
				if (civil.getLogin()!=null) {
					login.setText(civil.getLogin());
				}
				if (civil.getDeathDate()!=null) {
					dte_dec.setValue(LocalDate.ofInstant(civil.getDeathDate(), ZoneOffset.UTC));
				}
				ObservableList<String> listLiborg = FXCollections.observableArrayList();
				list.clear();
				String query = "SELECT * FROM appartenir WHERE IdCiv="+civil.getId();
				result=statement.executeQuery(query);
				if (result.next()) {
					result=statement.executeQuery(query);
					while(result.next()) {
						list.add(result.getInt("idOrg"));
					}
					for (int i=0; i<list.size(); i++) {
						query = "SELECT * FROM organisation WHERE idOrg = "+list.get(i);
						result = statement.executeQuery(query);
						while (result.next()) {
							listLiborg.add(result.getString("nom"));	
						}
					}
					orgtxt.clear();
					for (int i=0; i<listLiborg.size(); i++) {
						orgtxt.appendText(listLiborg.get(i)+"\n");
					}
				}
			}
		}
		catch (SQLException q) {
			throw new RuntimeException(q);
		}
	}
	public void remplissage(Civil civil) {
		setNom(civil.getLastName());
		//this.nom.setText(civil.getLastName());
		//nom.setText(civil.getLastName());
		//dte_naiss.setValue(LocalDate.ofInstant(civil.getBirthday(),ZoneOffset.UTC));
	}
	public String getNom() {
		return nom.getText();
	}
	public void setNom(String value) {
		this.nom.setText(value);
	}
	@FXML 
	public void orgh(ActionEvent e) {
		String str = orgtxt.getText();
		int ind = str.indexOf(org.getSelectionModel().getSelectedItem().getNom());
		if (ind == -1) {
			System.out.println(org.getSelectionModel().getSelectedItem().getId());
			orgtxt.appendText(org.getSelectionModel().getSelectedItem().getNom()+"\n");
			//orgid.appendText(Integer.toString(org.getSelectionModel().getSelectedItem().getId())+"\n");
			list.add(org.getSelectionModel().getSelectedItem().getId());
		}else {
			System.out.println("Déjà dans la liste");
		}
		
	}
	public void remzh(ActionEvent e) {
		list.clear();
		orgtxt.clear();
	}
}
